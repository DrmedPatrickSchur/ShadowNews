# ============================================================================
# ShadowNews AWS Deployment Workflow
# ============================================================================
#
# Automated CI/CD pipeline for deploying ShadowNews to Amazon Web Services.
# This workflow builds Docker containers, pushes to ECR, and deploys to ECS
# when changes are pushed to the main branch.
#
# Key Features:
# - Automated Docker image building and pushing to Amazon ECR
# - ECS task definition updates with new container images
# - Zero-downtime deployments with service stability verification
# - Secure credential management via GitHub Secrets
# - Integration with AWS IAM for proper access control
#
# Prerequisites:
# 1. ECR repository for container images
# 2. ECS cluster, service, and task definition
# 3. IAM user with appropriate ECR/ECS permissions
# 4. GitHub Secrets configured for AWS credentials
#
# Environment Variables (Configure for your deployment):
# - AWS_REGION: Target AWS region (e.g., us-east-1)
# - ECR_REPOSITORY: Amazon ECR repository name
# - ECS_SERVICE: Amazon ECS service name
# - ECS_CLUSTER: Amazon ECS cluster name
# - ECS_TASK_DEFINITION: Path to task definition JSON file
# - CONTAINER_NAME: Container name in task definition
#
# Required GitHub Secrets:
# - AWS_ACCESS_KEY_ID: IAM user access key
# - AWS_SECRET_ACCESS_KEY: IAM user secret key
#
# Author: ShadowNews Team
# Version: 1.0.0
# Last Modified: 2025-07-27
# ============================================================================

# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

# ShadowNews AWS Deployment Pipeline
name: Deploy to Amazon ECS

# ============================================================================
# Workflow Triggers
# ============================================================================
# Automatically deploy when changes are pushed to main branch
# Ensures production stays synchronized with latest stable code
on:
  push:
    branches: [ "main" ]

# ============================================================================
# Environment Configuration
# ============================================================================
# AWS deployment configuration variables
# These must be configured for your specific AWS environment
env:
  # AWS region for deployment (e.g., us-east-1, us-west-2)
  AWS_REGION: MY_AWS_REGION
  
  # Amazon ECR repository name for ShadowNews container images
  ECR_REPOSITORY: MY_ECR_REPOSITORY
  
  # Amazon ECS service name running ShadowNews application
  ECS_SERVICE: MY_ECS_SERVICE
  
  # Amazon ECS cluster name hosting the service
  ECS_CLUSTER: MY_ECS_CLUSTER
  
  # Path to ECS task definition file (JSON format)
  # Example: .aws/task-definition.json
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION
  
  # Container name in the task definition containerDefinitions section
  CONTAINER_NAME: MY_CONTAINER_NAME

# ============================================================================
# Workflow Permissions
# ============================================================================
# Minimal permissions for security best practices
permissions:
  contents: read  # Read access to repository contents for checkout

# ============================================================================
# Deployment Job Definition
# ============================================================================
jobs:
  deploy:
    name: Deploy ShadowNews to AWS ECS
    runs-on: ubuntu-latest
    environment: production  # Use GitHub environment for additional protection

    steps:
    # ========================================================================
    # Source Code Checkout
    # ========================================================================
    # Retrieve the latest source code from the repository
    - name: Checkout Repository
      uses: actions/checkout@v4

    # ========================================================================
    # AWS Authentication
    # ========================================================================
    # Configure AWS credentials for ECR and ECS access
    # Uses GitHub Secrets for secure credential management
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ========================================================================
    # Amazon ECR Authentication
    # ========================================================================
    # Login to Amazon Elastic Container Registry for image push operations
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ========================================================================
    # Docker Build and Push
    # ========================================================================
    # Build ShadowNews Docker image and push to ECR
    # Uses Git SHA as image tag for unique versioning
    - name: Build, Tag, and Push ShadowNews Image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build ShadowNews Docker container with multi-stage build
        # Tag with Git SHA for immutable versioning
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Push container image to Amazon ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Output full image URI for subsequent steps
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # ========================================================================
    # ECS Task Definition Update
    # ========================================================================
    # Update task definition with new container image URI
    # Prepares deployment configuration with latest ShadowNews image
    - name: Update ECS Task Definition with New Image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    # ========================================================================
    # ECS Service Deployment
    # ========================================================================
    # Deploy updated task definition to ECS service
    # Performs rolling deployment with zero downtime
    - name: Deploy ShadowNews to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        # Wait for deployment to complete and service to become stable
        # Ensures successful deployment before marking workflow as complete
        wait-for-service-stability: true
